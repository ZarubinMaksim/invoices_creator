const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const xlsx = require('xlsx');
const app = express();
const PORT = 4000;
const puppeteer = require('puppeteer');
const { execSync } = require('child_process');
const toThaiBahtText = require('thai-baht-text');
const { toWords } = require('number-to-words');
const archiver = require('archiver');
const nodemailer = require('nodemailer');
require('dotenv').config();

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');

// –£–±–∏–≤–∞–µ–º –≤—Å–µ –≤–∏—Å—è—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chromium –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
console.log('üîÑ –£–±–∏–≤–∞–µ–º –≤–∏—Å—è—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chromium...');
try {
    execSync('pkill -f chromium', { stdio: 'ignore' });
    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Chromium –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
} catch (error) {
    console.log('‚ÑπÔ∏è –ù–µ –±—ã–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chromium –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
}

// –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö PDF
const pdfFolder = path.join(__dirname, 'saved_pdf');
if (!fs.existsSync(pdfFolder)) {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è PDF:', pdfFolder);
    fs.mkdirSync(pdfFolder, { recursive: true });
} else {
    console.log('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è PDF —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', pdfFolder);
}



// –ü—Ä–µ—Ñ–∏–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
const ROUTE_PREFIX = '/invoices';

// –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ URL
app.use(`${ROUTE_PREFIX}/pdf`, express.static(pdfFolder));

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const uploadFolder = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadFolder)) {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫:', uploadFolder);
    fs.mkdirSync(uploadFolder, { recursive: true });
} else {
    console.log('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', uploadFolder);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        console.log('üìÇ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤:', uploadFolder);
        cb(null, uploadFolder);
    },
    filename: (req, file, cb) => {
        const ext = path.extname(file.originalname);
        const name = path.basename(file.originalname, ext);
        const filename = `${name}-${Date.now()}${ext}`;
        console.log('üìù –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', filename);
        cb(null, filename);
    }
});
const upload = multer({
    storage,
    limits: { fileSize: 100 * 1024 * 1024 }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
let browserInstance = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞
async function getBrowser() {
    if (!browserInstance) {
        console.log('üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        
        const launchOptions = {
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--single-process',
                '--no-zygote',
                '--disable-extensions',
                '--disable-software-rasterizer',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding'
            ],
            headless: 'new',
            timeout: 120000,
            executablePath: '/snap/chromium/current/usr/lib/chromium-browser/chrome'
        };
        
        console.log('‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:', launchOptions);
        
        try {
            browserInstance = await puppeteer.launch(launchOptions);
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            const version = await browserInstance.version();
            console.log('üåê –í–µ—Ä—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', version);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
            
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å...');
            launchOptions.executablePath = '/usr/bin/chromium-browser';
            
            try {
                browserInstance = await puppeteer.launch(launchOptions);
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø—É—Ç–µ–º');
            } catch (retryError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å–∫–∞:', retryError);
                throw retryError;
            }
        }
    }
    
    return browserInstance;
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
app.get(`${ROUTE_PREFIX}/`, (req, res) => {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    res.send(`
        <h1>–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞</h1>
        <form action="${ROUTE_PREFIX}/upload" method="post" enctype="multipart/form-data">
            <input type="file" name="excel" accept=".xls,.xlsx" required />
            <button type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </form>
    `);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö PDF –≤ ZIP
app.get(`${ROUTE_PREFIX}/download-all`, (req, res) => {
  const zipName = `all_invoices_${Date.now()}.zip`;
  res.setHeader('Content-Disposition', `attachment; filename=${zipName}`);
  res.setHeader('Content-Type', 'application/zip');

  const archive = archiver('zip', { zlib: { level: 9 } });

  archive.on('error', err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', err);
      res.status(500).send({ error: err.message });
  });

  // –ü—Ä—è–º–æ –≤ –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∞
  archive.pipe(res);

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ PDF –∏–∑ –ø–∞–ø–∫–∏
  fs.readdirSync(pdfFolder).forEach(file => {
      const filePath = path.join(pdfFolder, file);
      archive.file(filePath, { name: file });
  });

  archive.finalize();
});

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Gmail (–Ω—É–∂–µ–Ω app password)
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_PASS  // –Ω–µ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google
  }
});


// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
app.post(`${ROUTE_PREFIX}/send-emails`, express.json(), async (req, res) => {
  const rows = req.body.rows || [];
  const results = [];

  for (const row of rows) {
    try {
      await transporter.sendMail({
        from: '"Invoices" <gsm@lagreenhotel.com>',
        to: row.email,
        subject: `–í–∞—à —Å—á—ë—Ç –∑–∞ –Ω–æ–º–µ—Ä ${row.room} –≤ La Green Hotel & Residence`,
        text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${row.name}! –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –≤–∞—à —Å—á–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä ${row.room}.`,
        attachments: [
          {
            filename: path.basename(row.pdf),
            path: path.join(__dirname, row.pdf.replace(`${ROUTE_PREFIX}/pdf/`, 'saved_pdf/'))
          }
        ]
      });
      results.push({ room: row.room, name: row.name, email: row.email, status: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞', row.email, err);
      results.push({ room: row.room, name: row.name, email: row.email, status: '–û—à–∏–±–∫–∞' });
    }
  }

  res.json({ results });
});


function getCurrentDate() {
  const today = new Date();
  const day = String(today.getDate()).padStart(2, '0');
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const year = today.getFullYear();
  return `${day}/${month}/${year}`;
}

function excelDateToDDMMYYYY(serial) {
  const excelEpoch = new Date(Date.UTC(1899, 11, 30)); // –±–∞–∑–∞ –¥–ª—è Excel
  const days = Math.floor(serial);
  const milliseconds = days * 24 * 60 * 60 * 1000;
  const date = new Date(excelEpoch.getTime() + milliseconds);

  const dd = String(date.getUTCDate()).padStart(2, '0');
  const mm = String(date.getUTCMonth() + 1).padStart(2, '0'); // –º–µ—Å—è—Ü—ã —Å 0
  const yyyy = date.getUTCFullYear();

  return `${dd}/${mm}/${yyyy}`;
}

function generateInvoiceNumber(counter, serial) {
  const excelEpoch = new Date(Date.UTC(1899, 11, 30)); // –±–∞–∑–∞ –¥–ª—è Excel
  const days = Math.floor(serial);
  const milliseconds = days * 24 * 60 * 60 * 1000;
  const date = new Date(excelEpoch.getTime() + milliseconds);

  const mm = String(date.getUTCMonth() + 1).padStart(2, '0'); // –º–µ—Å—è—Ü—ã —Å 0
  const yyyy = date.getUTCFullYear();

  const number = String(counter).padStart(3, '0'); // –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
  return `PS${yyyy}${mm}-${number}`;
}

let logQueue = [];

app.get(`${ROUTE_PREFIX}/logs`, (req, res) => {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∂–¥—ã–µ 200 –º—Å
  const interval = setInterval(() => {
    while (logQueue.length > 0) {
      const msg = logQueue.shift();
      res.write(`data: ${msg}\n\n`);
    }
  }, 200);

  req.on('close', () => {
    clearInterval(interval);
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
function logToBrowser(msg) {
  console.log(msg); // –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥
  logQueue.push(msg);
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
app.post(`${ROUTE_PREFIX}/upload`, upload.single('excel'), async (req, res) => {
    console.log('üì§ –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞');
    logToBrowser('üì§ –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞')
    if (!req.file) {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        logToBrowser('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
        return res.status(400).send('–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', req.file.filename);
    logToBrowser('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', req.file.filename)

    try {
        console.log('üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª...');
        logToBrowser('üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª...');

        const workbook = xlsx.readFile(req.file.path);
        console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        logToBrowser('‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        const sheetIndex = workbook.SheetNames.length - 4;
        const sheetName = workbook.SheetNames[sheetIndex];
        console.log('üìë –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç:', sheetName);
        logToBrowser('üìë –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç:', sheetName)
        
        const worksheet = workbook.Sheets[sheetName];
        const data = xlsx.utils.sheet_to_json(worksheet, { defval: '' });
        
        console.log('üìà –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫:', data.length);
        logToBrowser('üìà –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫:', data.length)

        res.writeHead(200, {
            'Content-Type': 'text/html; charset=utf-8',
            'Transfer-Encoding': 'chunked'
        });
        
        res.write(`
        <h1>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${req.file.filename}</h1>
        <h2>–°–æ–∑–¥–∞–Ω–∏–µ PDF:</h2>
        
        <!-- –¢–∞–±–ª–∏—Ü–∞ —Å PDF -->
        <table id="pdf-table" border="1" cellspacing="0" cellpadding="5" style="border-collapse: collapse; width: 100%;">
          <thead>
            <tr style="background-color: #f2f2f2;">
              <th>‚Ññ</th>
              <th>–ö–æ–º–Ω–∞—Ç–∞</th>
              <th>–ò–º—è</th>
              <th>–ü–æ—á—Ç–∞</th>
              <th><input type="checkbox" id="select-all" /> –í—Å–µ</th>
              <th>–í–æ–¥–∞</th>
              <th>–°–≤–µ—Ç</th>
              <th>–í—Å–µ–≥–æ</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–°—á—ë—Ç</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        
        <!-- –ö–Ω–æ–ø–∫–∏ -->
        <button onclick="window.location.href='${ROUTE_PREFIX}/download-all'" 
          style="margin-top:20px; padding:10px 20px; background:#4CAF50; color:white; border:none; border-radius:5px;">
          –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞ ZIP
        </button>
        
        <button onclick="sendSelectedEmails()" 
          style="margin-top:20px; margin-left:20px; padding:10px 20px; background:#2196F3; color:white; border:none; border-radius:5px;">
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –Ω–∞ –ø–æ—á—Ç—É
        </button>
        
        <!-- –ë–ª–æ–∫ –ª–æ–≥–æ–≤ -->
        <h2>–õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h2>
        <div id="server-logs" style="border:1px solid #ccc; padding:10px; height:200px; overflow-y:auto; margin-top:10px;">
          <strong>–õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:</strong><br>
        </div>
        
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏</h2>
        <table id="email-results" border="1" cellspacing="0" cellpadding="5" style="border-collapse: collapse; width: 100%;">
          <thead>
            <tr style="background-color: #f2f2f2;">
              <th>‚Ññ</th>
              <th>–ö–æ–º–Ω–∞—Ç–∞</th>
              <th>–§–ò–û</th>
              <th>–ü–æ—á—Ç–∞</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        
        <div id="email-status" style="margin-top:20px; font-weight:bold;"></div>
        
        <script>
        let counter = 0;
        function addPdfRow(room, name, email, water, electricity, total, status, pdfPath) {
          counter++;
          const tbody = document.querySelector('#pdf-table tbody');
          const row = document.createElement('tr');
        
          let statusCell = '<td style="background:' + (status === 'success' ? '#c6efce' : '#ffc7ce') +
                           '; text-align:center; font-weight:bold;">' +
                           (status === 'success' ? 'SUCCESS' : 'ERROR') + '</td>';
        
          let downloadCell = '';
          if (status === 'success') {
            downloadCell = '<td><a href="' + pdfPath + '" target="_blank" ' +
                           'style="display:inline-block; padding:5px 10px; background:#4CAF50; color:white; text-decoration:none; border-radius:5px;">–°–∫–∞—á–∞—Ç—å</a></td>';
          } else {
            downloadCell = '<td>-</td>';
          }
        
          row.innerHTML = '<td>' + counter + '</td>' +
                          '<td>' + room + '</td>' +
                          '<td>' + name + '</td>' +
                          '<td>' + email + '</td>' +
                          '<td><input type="checkbox" class="email-checkbox" ' +
        
        `);
        

        // –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        console.log('üñ•Ô∏è –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞...');
        const browser = await getBrowser();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        
        let successCount = 0;
        let errorCount = 0;
        let invoiceCount = 0

        for (let rowIndex = 2; rowIndex < data.length; rowIndex++) {
            invoiceCount += 1
            const row = data[rowIndex];
            const name = row['Guest name'] || '';
            const room = row['Room no.'] || '';
            //const rawEmail = row['Guest e-mail'] || ''; //—É–¥–∞–ª–∏—Ç—å –∫–æ–≥–¥–∞ –∫–æ–ª–æ–Ω–∫–∏ –µ–º–∞–∏–ª –∏ —Ç–µ–ª –±—É–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ
            //const email = rawEmail.split(/[\s/]/)[0].trim();     //—É–¥–∞–ª–∏—Ç—å –∫–æ–≥–¥–∞ –∫–æ–ª–æ–Ω–∫–∏ –µ–º–∞–∏–ª –∏ —Ç–µ–ª –±—É–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ        
            const email = '89940028777@ya.ru'
            const water_start = (parseFloat(row['Water Meter numbers']) || 0).toFixed(2);
            const water_end = (parseFloat(row['__EMPTY_2']) || 0).toFixed(2);
            const water_consumption = (parseFloat(row['Water consumption']) || 0).toFixed(2);
            const water_price = 89;
            const water_total = (parseFloat(row['__EMPTY_3']) || 0).toFixed(2);
            const electricity_start = (parseFloat(row['Electricity Meter numbers']) || 0).toFixed(2);
            const electricity_end = (parseFloat(row['__EMPTY_4']) || 0).toFixed(2);
            const electricity_consumption = (parseFloat(row['Eletricity']) || 0).toFixed(2);
            const electricity_price = 8;
            const electricity_total = (parseFloat(row['__EMPTY_5']) || 0).toFixed(2);
            const amount_total = (parseFloat(row['Before amount']) || 0).toFixed(2);
            const amount_before_vat = (parseFloat(row['Before amount']) || 0).toFixed(2);
            const vat = (parseFloat(row['SVC']) || 0).toFixed(2);
            const amount_total_net = (parseFloat(row['Total amount']) || 0).toFixed(2);
            const invoice_number = generateInvoiceNumber(invoiceCount, row['Period Check']); 
            const date_from = excelDateToDDMMYYYY(row['Period Check']) || '';
            const date_to = excelDateToDDMMYYYY(row['__EMPTY_1']) || '';
            const date_of_creating = getCurrentDate()
            const total_in_thai = toThaiBahtText(amount_total_net)
            const total_in_english = toWords(amount_total_net)



            console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}:`, { 
              name, 
              room, 
              water_start, 
              water_end, 
              water_consumption, 
              water_price, 
              water_total, 
              electricity_start, 
              electricity_end, 
              electricity_consumption, 
              electricity_price, 
              electricity_total, 
              amount_total, 
              amount_before_vat, 
              vat, 
              amount_total_net,
              invoice_number,
            date_from,
          date_to,
          date_of_creating,
          total_in_thai,
        total_in_english });

            if (!name && !room) {
                console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É');
                continue;
            }

            try {
                console.log('üìÑ –ß–∏—Ç–∞–µ–º HTML —à–∞–±–ª–æ–Ω...');
                const logoPath = path.join(__dirname, 'img/logo.png');
                const qrPath = path.join(__dirname, 'img/qr.png');
                const logoBase64 = fs.readFileSync(logoPath).toString('base64');
                const qrBase64 = fs.readFileSync(qrPath).toString('base64');
                const logoDataUri = `data:image/png;base64,${logoBase64}`;
                const qrDataUri = `data:image/png;base64,${qrBase64}`;
                let invoiceHtml = fs.readFileSync(path.join(__dirname, 'invoice_template.html'), 'utf-8');
                invoiceHtml = invoiceHtml.replace('{{name}}', name)
                                         .replace('{{room}}', room)
                                         .replace('{{water_start}}', water_start)
                                         .replace('{{water_end}}', water_end)
                                         .replace('{{water_consumption}}', water_consumption)
                                         .replace('{{water_price}}', water_price)
                                         .replace('{{water_total}}', water_total)
                                         .replace('{{electricity_start}}', electricity_start)
                                         .replace('{{electricity_end}}', electricity_end)
                                         .replace('{{electricity_consumption}}', electricity_consumption)
                                         .replace('{{electricity_price}}', electricity_price)
                                         .replace('{{electricity_total}}', electricity_total)
                                         .replace('{{amount_total}}', amount_total)
                                         .replace('{{amount_before_vat}}', amount_before_vat)
                                         .replace('{{vat}}', vat)
                                         .replace('{{amount_total_net}}', amount_total_net)
                                         .replace('{{invoice_number}}', invoice_number)
                                         .replace('{{date_from}}', date_from)
                                         .replace('{{date_to}}', date_to)
                                         .replace('{{date_of_creating}}', date_of_creating)
                                         .replace('{{total_in_thai}}', total_in_thai)
                                         .replace('{{total_in_english}}', total_in_english)
                                         .replace('{{qr_base64}}', qrDataUri)
                                         .replace('{{logo_base64}}', logoDataUri);

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                const page = await browser.newPage();
                
                console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...');
                await page.setContent(invoiceHtml, { 
                    waitUntil: 'networkidle0',
                    timeout: 30000
                });
                const pdfFileName = `${name.replace(/\s+/g, '_')}_${room}_${Date.now()}.pdf`;
                const pdfPath = path.join(pdfFolder, pdfFileName);
                console.log('üñ®Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF:', pdfPath);
                
                await page.pdf({ 
                    path: pdfPath, 
                    format: 'A4', 
                    printBackground: true,
                    timeout: 30000
                });
                
                console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                await page.close();
                const pdfUrl = `${ROUTE_PREFIX}/pdf/${pdfFileName}`;

                res.write(`<script>addPdfRow("${room}", "${name}", "${email}", "${water_total}", "${electricity_total}", "${amount_total}", "success", "${pdfUrl}");</script>`);
                successCount++;
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                errorCount++;
                res.write(`<script>addPdfRow("${room}", "${name}", "${email}", "${water_total}", "${electricity_total}", "${amount_total}", "error", "");</script>`);
              }
        }

        res.write(`<h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}</h3>`);
        res.end();
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞: ' + error.message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    if (browserInstance) {
        console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        await browserInstance.close();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
    console.log('üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
    process.exit();
});

// –°–ª—É—à–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.listen(PORT, '0.0.0.0', () => {
    console.log(`‚úÖ Invoices server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ: http://38.244.150.204:${PORT}${ROUTE_PREFIX}`);
});