const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const xlsx = require('xlsx');
const app = express();
const PORT = 4000;
const puppeteer = require('puppeteer');

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');

// –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö PDF
const pdfFolder = path.join(__dirname, 'saved_pdf');
if (!fs.existsSync(pdfFolder)) {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è PDF:', pdfFolder);
    fs.mkdirSync(pdfFolder);
} else {
    console.log('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è PDF —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', pdfFolder);
}

// –ü—Ä–µ—Ñ–∏–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
const ROUTE_PREFIX = '/invoices';

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const uploadFolder = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadFolder)) {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫:', uploadFolder);
    fs.mkdirSync(uploadFolder);
} else {
    console.log('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', uploadFolder);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer —Å –ª–∏–º–∏—Ç–æ–º 100 MB
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        console.log('üìÇ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤:', uploadFolder);
        cb(null, uploadFolder);
    },
    filename: (req, file, cb) => {
        const ext = path.extname(file.originalname);
        const name = path.basename(file.originalname, ext);
        const filename = `${name}-${Date.now()}${ext}`;
        console.log('üìù –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', filename);
        cb(null, filename);
    }
});
const upload = multer({
    storage,
    limits: { fileSize: 100 * 1024 * 1024 } // 100 MB
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
let browserInstance = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
async function getBrowser() {
    if (!browserInstance) {
        console.log('üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        browserInstance = await puppeteer.launch({ 
            args: ['--no-sandbox', '--disable-setuid-sandbox'], 
            executablePath: '/usr/bin/chromium-browser', 
            headless: true 
        });
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } else {
        console.log('üîÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞');
    }
    return browserInstance;
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
app.get(`${ROUTE_PREFIX}/`, (req, res) => {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    res.send(`
        <h1>–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞</h1>
        <form action="${ROUTE_PREFIX}/upload" method="post" enctype="multipart/form-data">
            <input type="file" name="excel" accept=".xls,.xlsx" required />
            <button type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </form>
    `);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
app.post(`${ROUTE_PREFIX}/upload`, upload.single('excel'), async (req, res) => {
    console.log('üì§ –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞');
    
    if (!req.file) {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return res.status(400).send('–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', req.file.filename);
    console.log('üìä –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', req.file.path);

    try {
        console.log('üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª...');
        const workbook = xlsx.readFile(req.file.path);
        console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
        const sheetIndex = workbook.SheetNames.length - 4; // –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç
        const sheetName = workbook.SheetNames[sheetIndex];
        console.log('üìë –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç:', sheetName, '(–∏–Ω–¥–µ–∫—Å:', sheetIndex, ')');
        
        const worksheet = workbook.Sheets[sheetName];
        const data = xlsx.utils.sheet_to_json(worksheet, { defval: '' });
        
        console.log('üìà –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫:', data.length);
        console.log('üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', JSON.stringify(data[0]));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        res.writeHead(200, {
            'Content-Type': 'text/html; charset=utf-8',
            'Transfer-Encoding': 'chunked'
        });
        
        console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π HTML –æ—Ç–≤–µ—Ç');
        res.write(`
            <h1>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${req.file.filename}</h1>
            <h2>–°–æ–∑–¥–∞–Ω–∏–µ PDF:</h2>
            <ul id="pdf-list"></ul>
            <script>
                function addPdfItem(text) {
                    const list = document.getElementById('pdf-list');
                    const item = document.createElement('li');
                    item.textContent = text;
                    list.appendChild(item);
                    window.scrollTo(0, document.body.scrollHeight);
                }
            </script>
        `);

        // –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö PDF
        console.log('üñ•Ô∏è –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞...');
        const browser = await getBrowser();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        
        let successCount = 0;
        let errorCount = 0;
        let skipCount = 0;

        for (let rowIndex = 2; rowIndex < data.length; rowIndex++) {
            const row = data[rowIndex];
            const name = row['Guest name'] || '';
            const room = row['Room no.'] || '';
            const amount = row['Total amount'] || '';

            console.log(`\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}:`, { name, room, amount });

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (!name && !room && !amount) {
                console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É');
                skipCount++;
                continue;
            }

            try {
                console.log('üìÑ –ß–∏—Ç–∞–µ–º HTML —à–∞–±–ª–æ–Ω...');
                let invoiceHtml = fs.readFileSync(path.join(__dirname, 'invoice_template.html'), 'utf-8');
                invoiceHtml = invoiceHtml.replace('{{name}}', name)
                                         .replace('{{room}}', room)
                                         .replace('{{amount}}', amount);
                console.log('‚úÖ –®–∞–±–ª–æ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ PDF
                console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ...');
                const page = await browser.newPage();
                console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');

                console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                await page.setContent(invoiceHtml, { waitUntil: 'networkidle0' });
                console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

                const pdfPath = path.join(pdfFolder, `${name.replace(/\s+/g, '_')}_${room}_${Date.now()}.pdf`);
                console.log('üñ®Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF:', pdfPath);
                
                await page.pdf({ 
                    path: pdfPath, 
                    format: 'A4', 
                    printBackground: true 
                });
                
                console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                
                console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                await page.close();
                console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º PDF –∫–ª–∏–µ–Ω—Ç—É
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç—É');
                res.write(`<script>addPdfItem("${name} - ${room} - ${pdfPath}");</script>`);
                console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${room}, ${name}`);
                
                successCount++;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –¥–ª—è ${name} (${room}):`, error);
                res.write(`<script>addPdfItem("–û–®–ò–ë–ö–ê: ${name} - ${room}");</script>`);
                errorCount++;
            }
        }

        console.log(`\nüìä –ò–¢–û–ì–û: –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipCount}`);

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–≤–µ—Ç
        console.log('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–≤–µ—Ç');
        res.write(`<h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}</h3>`);
        res.end();
        console.log('‚úÖ –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
        if (!res.headersSent) {
            res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
        } else {
            res.write(`<script>addPdfItem("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}");</script>`);
            res.end();
        }
    } finally {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    if (browserInstance) {
        console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
        await browserInstance.close();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
    console.log('üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
    process.exit();
});

// –°–ª—É—à–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.listen(PORT, '0.0.0.0', () => {
    console.log(`‚úÖ Invoices server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://38.244.150.204:${PORT}${ROUTE_PREFIX}`);
    console.log('üìù –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∑–¥–µ—Å—å');
    console.log('='.repeat(50));
});